<?php

require_once 'CRM/Core/Form.php';
require_once 'amazonsns.function.php';

/**
 * Form controller class
 *
 * @see http://wiki.civicrm.org/confluence/display/CRMDOC43/QuickForm+Reference
 */
class CRM_Amazonsns_Form_Push extends CRM_Core_Form {

  private $sns;

  function preProcess() {
    parent::preProcess(); // TODO: Change the autogenerated stub

    $this->sns = new CRM_Amazonsns_SNS();

  }

  function buildQuickForm() {


    $topics = $this->sns->getAllTopics();

    // add form elements
    $this->add(
      'select', // field type
      'sns_topic', // field name
      'Topic', // field label
      $topics, // list of options
      true // is required
    );

    $this->add(
      'text', // field type
      'msg_title', // field name
      'Title', // field label
      null, // list of options
      false // is required
    );

    $this->add(
      'textarea', // field type
      'msg_body', // field name
      'Message', // field label
      null, // list of options
      true // is required
    );


    $this->addButtons(array(
      array(
        'type' => 'submit',
        'name' => ts('Send Message'),
        'isDefault' => TRUE,
      ),
    ));

    // export form elements
    $this->assign('elementNames', $this->getRenderableElementNames());
    parent::buildQuickForm();
  }

  function postProcess() {
    $values = $this->exportValues();

    $topic = CRM_Utils_Array::value('sns_topic', $values);
    $message = CRM_Utils_Array::value('msg_body', $values);
    $title = CRM_Utils_Array::value('msg_title', $values);

    if ($topic && $message) {
      $this->sns->publishToTopic(
        $topic,
        $this->sns->composeDefaultMessageStructure($message, $title),
        $title
      );
    }

    CRM_Core_Session::setStatus(ts("Message Sent"), '', 'success');
    parent::postProcess();
  }

  /**
   * Get the fields/elements defined in this form.
   *
   * @return array (string)
   */
  function getRenderableElementNames() {
    // The _elements list includes some items which should not be
    // auto-rendered in the loop -- such as "qfKey" and "buttons".  These
    // items don't have labels.  We'll identify renderable by filtering on
    // the 'label'.
    $elementNames = array();
    foreach ($this->_elements as $element) {
      /** @var HTML_QuickForm_Element $element */
      $label = $element->getLabel();
      if (!empty($label)) {
        $elementNames[] = $element->getName();
      }
    }
    return $elementNames;
  }
}
